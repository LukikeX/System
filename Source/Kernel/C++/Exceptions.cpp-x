#include <Core/Loader.h>

typedef void (*unexpected_handler)();
typedef void (*terminate_handler)();

struct __cxa_exception {
    ulong referenceCount;
    void* exceptionType; //typeinfo from std
    void (*exceptionDestructor)(void *);
    unexpected_handler unexpectedHandler;
    terminate_handler terminateHandler;
    
    __cxa_exception* nextException;
    int handlerCount;
    
    int handlerSwitchValue;
    const char* actionRecord;
    void* catchTemp;
    void* adjustedPtr;
    
    ulong sracka; // nejaky _Unwind_Exception unwindHeader;
};

static void throw_exception(__cxa_exception* ex) {
    
}

//==============================================================================


extern "C" void *__cxa_allocate_exception(unsigned int size) {
    char *buffer = new char[size + sizeof(int)];
    return buffer + sizeof(int);
}


extern "C" void __cxa_throw(void *exception, void *info, void(*dest)(void *)) {
   // dest(lol);
    __cxa_exception* ex = ((__cxa_exception *)exception) - 1;
    ex->referenceCount = 1;
    ex->exceptionType = info;
    ex->exceptionDestructor = dest;
    //ex->unexpectedHandler
    
    *kvt << "throw\n";
    exception(ex);
}


extern "C" void _Unwind_Resume(void *lol) {
    *kvt << "unwind resume\n";
}


extern "C" void __cxa_free_exception(void *thrown_exception) {
    *kvt << "free\n";
}


namespace __cxxabiv1 {
    class __pointer_type_info {
        virtual ~__pointer_type_info();
    //    int a;
    };
    
    class __class_type_info {
        virtual ~__class_type_info();
    };
    
    __pointer_type_info::~__pointer_type_info() {
        
    }
    
    __class_type_info::~__class_type_info() {
        
    }
}



//catch
extern "C" void *__cxa_get_exception_ptr(void *ExceptionObject) {
   // *kvt << "exceptios ptr\n";
    return 0;
}


extern "C" void *__cxa_begin_catch(void *e) {
 //   *kvt << "begin catch\n";
    return 0;
}


extern "C" void __cxa_end_catch() {
   // *kvt << "end catch\n";
}